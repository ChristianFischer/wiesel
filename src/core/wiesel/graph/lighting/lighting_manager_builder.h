/**
 * Copyright (C) 2013
 * Christian Fischer
 *
 * https://bitbucket.org/baldur/wiesel/
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA
 */
#ifndef __WIESEL_VIDEO_LIGHTING_MANAGER_BUILDER_H__
#define __WIESEL_VIDEO_LIGHTING_MANAGER_BUILDER_H__

#include <wiesel/wiesel-core.def>

#include "wiesel/video/shader_constantbuffer_builder.h"
#include "lighting_manager.h"


namespace wiesel {


	/**
	 * @brief A helper class to construct a new instance of \ref LightingManager.
	 */
	class WIESEL_CORE_EXPORT LightingManagerBuilder
	{
	public:
		LightingManagerBuilder();
		virtual ~LightingManagerBuilder();

	public:
		/**
		 * @brief A struct describing a single element within the light-info struct.
		 */
		struct LightInfoMember {
			std::string					name;
			LightSource::Attribute		attribute;
			video::ValueType			type;
		};


		/**
		 * @brief Alias type for a collection of light info members,
		 * which describes the light info struct within the shader.
		 */
		typedef std::vector<LightInfoMember>	LightInfoStruct;

	public:
		/**
		 * @brief Set the maximum number of active light sources, which can be handled
		 * by the lighting manager and the according shaders at the same time.
		 * When the given number is too small, some lights may disappear in the final scene.
		 * @param max_light_sources		The maximum number of lights allowed simultaneously.
		 *								The value should be positive and non-zero.
		 */
		void setMaxLightSources(uint8_t max_light_sources);

		/**
		 * @brief Set the maximum number of active light sources, which can be handled
		 * by the lighting manager and the according shaders at the same time.
		 */
		uint8_t getMaxLightSources() const;

		/**
		 * @brief Set the name of the constant buffer, which contains the light information
		 * generated by the created lighting manager.
		 */
		void setConstantBufferName(const std::string& name);

		/**
		 * @brief Get the name of the constant buffer, which contains the light information
		 */
		std::string getConstantBufferName() const;

		/**
		 * @brief Set the name of the uniform member which contains the lights data.
		 */
		void setLightsUniformName(const std::string& name);

		/**
		 * @brief Get the name of the uniform member which contains the lights data.
		 */
		std::string getLightsUniformName() const;

		/**
		 * @brief Set the name of the uniform member which contains the number of currently active lights.
		 */
		void setLightsCountUniformName(const std::string& name);

		/**
		 * @brief Get the name of the uniform member which contains the number of currently active lights.
		 */
		std::string getLightsCountUniformName() const;

	public:
		/**
		 * @brief Adds a member to the light info struct.
		 * @param attribute		The light attribute type.
		 * @param type			The value type for this member.
		 * @param name			The member's name.
		 */
		void addLightInfoMember(LightSource::Attribute attribute, video::ValueType type, const std::string& name);

		/**
		 * @brief Adds a light info member with it's default parameters.
		 * @param attribute		The light attribute type.
		 */
		void addDefaultLightInfoMember(LightSource::Attribute attribute);

		/**
		 * @brief Finishes the light info members within the shader constant buffer.
		 * This will be invoked automatically in \ref create, but may be used earlier,
		 * to be able to add additional uniform members behind the lights data.
		 */
		virtual void finishLightInfoMembers();

		/**
		 * @brief Get all light info members added to the current lighting manager.
		 */
		inline const LightInfoStruct* getLightInfoMembers() const {
			return &lightinfo_struct;
		}

	public:
		/**
		 * @brief Provides access to the lighting managers constant buffer template builder
		 * to add custom attributes to it, which are not under control of the
		 * generated lighting manager.
		 */
		video::ShaderConstantBufferTemplateBuilder* getConstantBufferTemplateBuilder();

		/**
		 * @brief Provides access to the lighting managers constant buffer template builder
		 * to add custom attributes to it, which are not under control of the
		 * generated lighting manager.
		 */
		const video::ShaderConstantBufferTemplateBuilder* getConstantBufferTemplateBuilder() const;

		/**
		 * @brief Finally creates the instance of the generated lighting manager.
		 * After calling this function, the builder is invalid and should be deleted.
		 */
		virtual LightingManager* create();

	private:
		video::ShaderConstantBufferTemplateBuilder	buffer_builder;

		LightingManager*	manager;

		LightInfoStruct		lightinfo_struct;
		bool				lightinfo_created;

		bool				finished;
	};

} // namespace wiesel

#endif // __WIESEL_VIDEO_LIGHTING_MANAGER_BUILDER_H__
